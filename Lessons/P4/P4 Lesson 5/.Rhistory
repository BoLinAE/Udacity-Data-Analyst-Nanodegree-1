View(df)
ggplot(aes(x = Economy..GDP.per.Capita. , y = Health..Life.Expectancy), data =df) + geom_point(aes(color=Region))
ggplot(aes(x = Economy..GDP.per.Capita. , y = Health..Life.Expectancy.), data =df) + geom_point(aes(color=Region))
ggplot(aes(x = Freedom, y = Economy..GDP.per.Capita.), data = df) + facet_wrap(Region) + geom_point(color='blue')
ggplot(aes(x = Freedom, y = Economy..GDP.per.Capita.), data = df) + facet_wrap(~Region) + geom_point(color='blue')
cor.test(df, Freedom, Economy..GDP.per.Capita.)
with(df, cor.test(Freedom, Economy..GDP.per.Capita.)
with(df, cor.test(Freedom, Economy..GDP.per.Capita.))
with(df, cor.test(Freedom,Economy..GDP.per.Capita. ))
with(group_by(df, Region), cor.test(Freedom,Economy..GDP.per.Capita. ))
ggplot(aes(x = Trust..Government.Corruption, y = Dystopia.Residual), data = df) + facet_wrap(~Region) +  geom_point(color= 'red')
ggplot(aes(x = Trust..Government.Corruption., y = Dystopia.Residual), data = df) + facet_wrap(~Region) +  geom_point(color= 'red')
ggplot(aes(x = Economy..GDP.per.Capita. , y = Health..Life.Expectancy.), data =df) + geom_point(aes(color=Region)) +
labs(x='GDP per Capita', y= 'Normalized Life Expectancy', title = 'Life Expectancy vs GDP by Region')
ggplot(aes(x = Freedom, y = Economy..GDP.per.Capita.), data = df) + facet_wrap(~Region) + geom_point(color='blue') +
labs(x='Freedom', y='GDP Per Capita', title = 'GDP per Capita vs Freedom')
ggplot(aes(x = Trust..Government.Corruption., y = Dystopia.Residual), data = df) + facet_wrap(~Region) +  geom_point(color= 'red') +
labs(x = 'Trust in Government' , y = 'Dystopia', title= 'Dystopia vs Trust in Government')
ggplot(aes(x = Freedom, y = Economy..GDP.per.Capita.), data = df) + facet_wrap(~Region) + geom_point(color='blue') +
labs(x='Freedom', y='GDP Per Capita', title = 'GDP per Capita vs Freedom') + geom_smooth(method='lm')
ggplot(aes(x = Freedom, y = Economy..GDP.per.Capita.), data = df) + facet_wrap(~Region) + geom_point(color='blue') +
labs(x='Freedom', y='GDP Per Capita', title = 'GDP per Capita vs Freedom') + geom_smooth(method='lm', color= 'red', linetype=2)
ggplot(aes(x = Trust..Government.Corruption., y = Dystopia.Residual), data = df) + facet_wrap(~Region) +  geom_point(color= 'red') +
labs(x = 'Trust in Government' , y = 'Dystopia', title= 'Dystopia vs Trust in Government') + geom_smooth(method='lm', color='black', linetype = 2)
install.packages('Hmisc')
library(Hmisc)
ccs <- as.matrix(df[, c(4, 7:13)])
rcorr(ccs, type='pearson')
install.packages("Hmisc")
summarize(regions, mean(Happiness.Score))
regions <- group_by(df, Region)
summarize(regions, mean(Happiness.Score))
View(regions)
summarize(regions, mean(regions$Happiness.Score))
library(dplyr)
regions <- group_by(df, Region)
summarize(regions, mean(regions$Happiness.Score))
summarize(regions, mean(Happiness.Score))
ggplot(aes(x = Region, y= Happiness.Score),  data = df) + geom_bar(stat= 'summary', fun.y='mean', color='black', fill='orange') +
theme(axis.text.x = element_text(angle = 60, hjust=1)) +
labs(x = 'Region', y = 'Mean Happiness') + scale_y_continuous(breaks=seq(0,8,1)) + labs(title='Mean Happiness Score by Region')
tail(df, 10)
install.packages('Hmisc')
install.packages("Hmisc")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
# Center title on all plots
theme_update(plot.title= element_text(hjust=0.5))
df <- read.csv('happiness2016.csv')
ggplot(aes(x = Freedom, y = Happiness.Score) , data = df) + geom_point(aes(size=Generosity), color='navy') +
labs(title='Happiness Score vs Freedom')
with(df, cor.test(Freedom, Happiness.Score))
ggplot(aes(x = Freedom, y = Economy..GDP.per.Capita.), data = df) + facet_wrap(~Region) + geom_point(color='blue') +
labs(x='Freedom', y='GDP Per Capita', title = 'GDP per Capita vs Freedom') + geom_smooth(method='lm', color= 'red', linetype=2)
ggplot(aes(x = Trust..Government.Corruption., y = Dystopia.Residual), data = df) + facet_wrap(~Region) +  geom_point(color= 'red') +
labs(x = 'Trust in Government' , y = 'Dystopia', title= 'Dystopia vs Trust in Government') + geom_smooth(method='lm', color='black', linetype = 2)
data(diamonds)
df <- diamonds
ggplot(aes(x = carat, y = price), data= df) + geom_point(color=color)
ggplot(aes(x = carat, y = price), data= df) + geom_point(aes(color=color) )
ggplot(aes(x = carat, y = price), data= df) + geom_point(aes(color=color) ) + coord_cartesian(xlim=c(0,3)) + scale_y_log10()
ggplot(aes(x = carat, y = price), data = df, xlim=c(0,quantile(carat, 0.99)) , ylim=c(0, quantile(price, 0.99))) + geom_point()
ggplot(aes(x = carat, y = price), data = df, xlim=c(0,quantile(carat, 0.99)) , ylim=c(0, quantile(price, 0.99))) + geom_point(aes(color=color)) + scale_color_discrete(name='Diamond Color')
ggplot(aes(x = carat, y = price), data = df, xlim=c(0,quantile(carat, 0.99)) , ylim=c(0, quantile(price, 0.99))) + geom_point(aes(color=color)) + scale_color_discrete(name='Diamond Color') + geom_smooth(method = 'lm')
ggplot(aes(x = carat, y = price), data = df, xlim=c(0,quantile(carat, 0.99)) , ylim=c(0, quantile(price, 0.99))) + geom_point(aes(color=color)) + scale_color_discrete(name='Diamond Color') + stat_smooth(method = 'lm')
ggplot(aes(x = carat, y = price), data = df, xlim=c(0,quantile(carat, 0.99)) , ylim=c(0, quantile(price, 0.99))) + geom_point(aes(color=color)) + scale_color_discrete(name='Diamond Color') + stat_smooth(method = 'lm') + coord_cartesian(ylim = c(0,quantile(price, 0.99)))
ggplot(aes(x = carat, y = price), data = df, xlim=c(0,quantile(carat, 0.99)) , ylim=c(0, quantile(price, 0.99))) + geom_point(aes(color=color)) + scale_color_discrete(name='Diamond Color') + stat_smooth(method = 'lm') + coord_cartesian(ylim = c(0,quantile(df$price, 0.99)))
ggplot(aes(x = carat, y = price), data = df) + geom_point(aes(color=color)) + scale_color_discrete(name='Diamond Color') + stat_smooth(method = 'lm') + coord_cartesian(ylim = c(0,quantile(df$price, 0.99)), xlim=c(0,quantile(df$carat, 0.99)))
install.packages('GGally')
install.packages('scales')
install.packages("scales")
install.packages('memisc')
install.packages('lattice')
install.packages('MASS')
install.packages('car')
install.packages('reshape')
library(ggplot2)
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
install.packages('scales')
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
help("wrap", package="GGally")
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
library(dplyr)
library(gridExtra)
p1 <- qplot(x = price, data = df)
grid.arrange(p1, p2 , ncol=2)
p2 <- qplot(x = price, data = df, binwidth = 500) + scale_y_log10
p2 <- qplot(x = price, data = df, binwidth = 500) + scale_y_log10()
grid.arrange(p1, p2 , ncol=2)
p2 <- qplot(x = price, data = df, binwidth = 500) + scale_x_log10()
grid.arrange(p1, p2 , ncol=2)
p2 <- qplot(x = price, data = df) + scale_x_log10()
grid.arrange(p1, p2 , ncol=2)
p1 <- qplot(x = price, data = df, binwidth = 500, color=I('black'), fill=I('red')) + ggtitle('Price Histogram')
p2 <- qplot(x = price, data = df) + scale_x_log10()
grid.arrange(p1, p2 , ncol=2)
p2 <- qplot(x = price, data = df, color=I('black'), fill = I('red')) + scale_x_log10() + ggtitle('Log10 Price Histogram')
grid.arrange(p1, p2 , ncol=2)
theme_update(plot.title = element_text(hjust=0.5))
p1 <- qplot(x = price, data = df, binwidth = 500, color=I('black'), fill=I('red')) + ggtitle('Price Histogram')
p2 <- qplot(x = price, data = df, color=I('black'), fill = I('red')) + scale_x_log10() + ggtitle('Log10 Price Histogram')
grid.arrange(p1, p2 , ncol=2)
p2 <- qplot(x = price, data = df, binwdith = 500, color=I('black'), fill = I('red')) + scale_x_log10() + ggtitle('Log10 Price Histogram')
p2 <- qplot(x = price, data = df, binwidth = 500, color=I('black'), fill = I('red')) + scale_x_log10() + ggtitle('Log10 Price Histogram')
grid.arrange(p1, p2 , ncol=2)
p2 <- qplot(x = price, data = df, binwidth = 100, color=I('black'), fill = I('red')) + scale_x_log10() + ggtitle('Log10 Price Histogram')
grid.arrange(p1, p2 , ncol=2)
p2 <- qplot(x = price, data = df, nbins = 20, color=I('black'), fill = I('red')) + scale_x_log10() + ggtitle('Log10 Price Histogram')
p2 <- qplot(x = price, data = df, bins = 20, color=I('black'), fill = I('red')) + scale_x_log10() + ggtitle('Log10 Price Histogram')
grid.arrange(p1, p2 , ncol=2)
p1 <- qplot(x = price, data = df, bins = 20, color=I('black'), fill=I('red')) + ggtitle('Price Histogram')
p2 <- qplot(x = price, data = df, bins = 20, color=I('black'), fill = I('red')) + scale_x_log10() + ggtitle('Log10 Price Histogram')
grid.arrange(p1, p2 , ncol=2)
ggplot(aes(x = carat, y= price), data = df) + geom_point(aes(color = color))
ggplot(aes(x = carat, y= price), data = df) + geom_point(aes(color = color)) + coord_cartesian(xlim= c(0,3))
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(aes(color=color)) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(aes(color=color)) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat') + stat_smooth(method = 'lm')
ggplot(aes(carat, price), data = diamonds) +
geom_point(aes(color=color, alpha = 1/2) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat') + stat_smooth(method = 'lm')
ggplot(aes(carat, price), data = diamonds) +
ggplot(aes(carat, price), data = diamonds) +
geom_point(aes(color=color, alpha = 1/2)) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat') + stat_smooth(method = 'lm')
ggplot(aes(carat, price), data = diamonds) +
geom_point(aes(color=color) alpha = 1/2) +
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(carat, price), data = diamonds) +
geom_point(aes(color=color) alpha = 1/2) +
ggplot(aes(carat, price), data = diamonds) +
geom_point(aes(color=color), alpha = 1/2) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat') + stat_smooth(method = 'lm')
ggplot(aes(carat, price), data = diamonds) +
geom_jitter(aes(color=color), alpha = 1/2, size = 0.75) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat') + stat_smooth(method = 'lm')
ggplot(aes(carat, price), data = diamonds) +
geom_jitter( alpha = 1/2, size = 0.75) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat') + stat_smooth(method = 'lm')
head(table(sort(df, price)))
head(table(arrange(df, price)))
head(table(sort(df, df$price)))
head(sort(table(df$price), descending = TRUE)
head(sort(table(df$carat), descending = TRUE)
head(sort(table(df$carat), decreasing = TRUE)
head(sort(table(df$price), decreasing = TRUE))
?head
head(sort(table(df$carat), decreasing = TRUE))
head(sort(table(df$price), decreasing = TRUE))
ggplot(aes(carat, price), data = diamonds) +
geom_point( alpha = 1/2, size = 0.75, position = 'jitter') +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat') + stat_smooth(method = 'lm')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(aes(color=clarity),alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
?diamonds
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(aes(color=clarity),alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(aes(color=clarity),alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 0.05, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(aes(color=clarity),alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2.4))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(aes(color = cut), alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and  Cut')
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(aes(color = cut), alpha = 0.5, size = 1.5, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and  Cut')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(aes(color = color), alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = Cut, reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(aes(color = color), alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point( alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
display.brewer.all()
display.brewer.all
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point( alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div', naeme = 'PiYG
guide = guide_legend(title = 'Color', reverse = T,
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point( alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div', name = 'PiYG'
guide = guide_legend(title = 'Color', reverse = T,
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point( alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div', name = 'PiYG',
guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point( alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div', name = 'Spectral',
guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point( alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div', select = 'Spectral',
guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point( alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div', name = 'Spectral',
guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point( alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'seq', name = 'Spectral',
guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point( alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'seq', name = 'BuGn',
guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
scale_color_brewer( guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
?scale_color_brewer
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point( alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'seq', palette = 2,
guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point( alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div', palette = 5,
guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point( alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div', palette = 8,
guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point( alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div', palette = 8,
guide = guide_legend(title = 'Color',
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
m1 <- lm(I(log10(price)) ~ I(carat^(1/3)), data = diamonds))
m1 <- lm(I(log10(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ .+ clarity)
m3 <- update(m2, ~ .+ color)
m4 <- update(m3, ~ .+ cut)
m4 <- update(m3, ~ .+ cut)
m5 <- update(m4, ~ .+ carat)
mtable(m1, m2, m3, m4, m5, sdigits = 3)
?mtable
?lm
m5
big_df <- read.csv('diamondsbig.csv')
str(big_df)
summary(big_df)
summary(big_df, sdigits = 4)
big_df <- subset(big_df, price < 10000, cert == 'GIA')
View(big_df)
big_df <- subset(big_df, price < 10000, cert == 'GIA',)
big_df <- read.csv('diamondsbig.csv')
big_df <- subset(big_df, price < 10000, cert == 'GIA',)
big_df <- read.csv('diamondsbig.csv')
interm_df <- subset(big_df, price < 10000, cert == 'GIA',)
interm_df <- subset(big_df, price < 10000 & cert == 'GIA',)
m1 <- lm(I(log10(price)) ~ I(carat^(1/3)), data = interm_df)
m2 <- update(m1, ~ .+ clarity)
m2 <- update(m1, ~ .+ clarity)
m2 <- update(m1, ~ .+ clarity)
m3 <- update(m2 ~ .+ cut)
m3 <- update(m2, ~ .+ cut)
m5 <- update(m4, ~ .+ carat)
mtable(m1,m2,m3,m4,m5, sdigits = 4)
interm_df <- subset(big_df, price < 10000 & cert == 'GIA')
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
View(interm_df)
library(memisc)
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
View(thisDiamond)
thisDiamond = data.frame(carat = 1.00, cut = "Very Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
View(modelEstimate)
View(modelEstimate)
modelEstimate
exp(modelEstimate)
10^(modelEstimate)
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = interm_df)
m3 <- update(m2, ~ .+ cut)
m3 <- update(m2, ~ .+ cut)
m4 <- update(m3, ~ .+ color)
m4 <- update(m3, ~ .+ color)
m5 <- update(m4, ~ .+ carat)
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
10^(modelEstimate)
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
10^(modelEstimate)
?log
install.packages("ggplot2", dependencies = T)
install.packages("knitr", dependencies = T)
install.packages("dplyr", dependencies = T)
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = interm_df)
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = interm_df)
m2 <- update(m1, ~ .+ clarity)
m2 <- update(m1, ~ .+ clarity)
m3 <- update(m2, ~ .+ cut)
m3 <- update(m2, ~ .+ cut)
m4 <- update(m3, ~ .+ color)
m3 <- update(m2, ~ .+ cut)
m4 <- update(m3, ~ .+ color)
m5 <- update(m4, ~ .+ carat)
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
10^(modelEstimate)
exp(modelEstimate)
